##################### ---- ФУНКЦИИ ---- ##############################

# Задание 1:
# Спросите у пользователя строку НА Английском или целое предложение и
# удалите все глассные буквы там.
# То что осталось от строки выведите на экран.
# Строка не должна быть короче 10 символов.

################################################################################



# Задание 2:
# Вам дан набор данных accounts.
# Функция должна проходить по каждому листу состоящему из 3-х символов и
# найти ту
# где их сумма больше всего.

# accounts = [
#     [[1,5,5],[7,4,5],[1,3,5],[2,1,5],[7,3,9],[8,3,5],[1,5,0],[7,3,2],[9,3,5]],
#     [[1,5,3],[2,7,3],[6,3,5],[1,5,9],[7,3,3],[3,5,4],[1,5,6],[7,3,6],[3,5,8]],
#     [[1,5,3],[7,3,0],[3,5,4],[1,5,6],[7,3,2],[3,5,4],[1,5,9],[7,3,2],[3,5,0]],
#     [[1,5,1],[7,3,2],[3,5,3],[1,5,4],[7,3,5],[3,5,6],[1,5,7],[7,3,8],[3,5,9]],
# ]

################################################################################

def find_max_sum_list(accounts):
    max_sum = 0
    max_sum_list = None

    for sublist in accounts:
        sublist_sum = sum(sublist)
        if sublist_sum > max_sum:
            max_sum = sublist_sum
            max_sum_list = sublist

    return max_sum_list

accounts = [
    [1,5,5],[7,4,5],[1,3,5],[2,1,5],[7,3,9],[8,3,5],[1,5,0],[7,3,2],[9,3,5],
    [1,5,3],[2,7,3],[6,3,5],[1,5,9],[7,3,3],[3,5,4],[1,5,6],[7,3,6],[3,5,8],
    [1,5,3],[7,3,0],[3,5,4],[1,5,6],[7,3,2],[3,5,4],[1,5,9],[7,3,2],[3,5,0],
    [1,5,1],[7,3,2],[3,5,3],[1,5,4],[7,3,5],[3,5,6],[1,5,7],[7,3,8],[3,5,9],
]

result = find_max_sum_list(accounts)
print("List with the maximum sum:", result)


# Задание 3:
# Вам даны 2 листа:

# list_1 = ['a', 'bc', 'de']
# list_2 = ['ab', 'c', 'de']

# Напишите функцию которая их принимает и сравнивает на равность.
# Пример где листы равны:

    # a + bc + de = abcde
    # ab + c + de = abcde

    # list_1 = ['123', 'abc', 'de']
    # list_2 = ['1', '23', 'abcde']

# Пример где листы НЕ равны:

    # a + cb + de = acbde
    # ab + c + de = abcde

    # list_1 = ['123', 'abc', 'de']
    # list_2 = ['123', 'de', 'abc']

################################################################################


# Задание 4:
# Известно что функция print() выводит на экран текст который Вы в ней указали.
# Известно что есть ещё один способ вывести на экран любой текст sys.stdout.write(), но его использовать нельзя.
# Так случилось что функция print поменяла своё имя и стала называться display.
# Выведите с помощью новой функции display() на экран следующий текст: "Теперь я тут PRINT()"
# Общее количество строк для решения этой задачи не может быть больше 2-х строк, иначе задание не принимается.

def display(joke):
    print(joke)
display("Теперь я тут PRINT()")


################################################################################



# Задание 5:
# Вам дан SET значений:

# uniques = {3,13,15,27,1,4,8,23,19,12,9,2,17}

# Создайте функцию которая:
# Удалите все чётные значения внутри SET, а оставшиеся отсортирует по убыванию.
# В результате, ваша функция должна вернуть отсортированный SET и неважно, каким будет SET растопленным или замороженным.

################################################################################


# Задание 6:
# В Python есть такой тип Данных как Boolean...
# Создайте TUPLE который ТЕХНИЧЕСКИ состоит из 4 Булевых ЗНАЧЕНИЙ.

def create_bool_tuple():
    bool_tuple = (True, False, True, False)
    return bool_tuple

print(create_bool_tuple())



################################################################################


# Задание 7:
# Вам дан TUPLE и пустая Dictionary:

# pairs = {}

# В Tuple перечислены элементы, где идёт строгая очерёдность STRING и INTEGER.
# То есть если перед вами элемент типа данных STRING то следующий точно INTEGER и наоборот.
# keys_values = ('one', 1, 2, 'two', 3, 'three', 'four', 4, 'five', 5, 6 'six', 7, 'seven', 'eight', 8, 'nine',9, 10, 'ten', 11, '11', 12 ,'13')
# Проходя по TUPLE необходимо брать элементы по парно, один элемент может относиться только и только к одной паре.
# Ваша задача выявить если элемент является типом данных string() то записывать его как ключ в Dictionary -> pairs.

# Пример:
# pairs ={'one': 1, 'two': 2, 'three': 3, ...}

################################################################################


# Задание 8:
# Создайте 2 функции input которые спрашивают пользовтеля:
# 1. Какой длины должно быть число.
# 2. Из каких цифр только должно состоять число.

# Если пользователь попросит сгенерировать число длиною меньше 7 символов, скажите что это слишком короткое число.
# Спросите число снова и снова и снова пока он не введёт допустимое число.

# Если пользователь попросит сгенерировать число длиною больше 30 символов, скажите что это слишком длинное число.
# Спросите число снова и снова и снова пока он не введёт допустимое число.

# Если пользователь введёт меньше чем 3 числа во втором input, скажите что он ввёл слишком мало значений и спросите снова.
# Во втором input числа будут вводиться строго либо через запятую либо через пробел.

# Если пользователь использовал и пробелы и запятые во втором input, скажите что он ввёл неправильные значения и спросите числа снова.
# После того как пользователь введёт вам оба верных значения:
# сгенерируйте ему число длиною как он попросил и состоящее только из тех чисел которые он указал.

# Пример:
# Какой длины должно быть число: 7
# Какие цифры только должны присутствовать: 2,3,5,0,1

# Результат:
# 2201550

# Какой длины должно быть число: 9
# Какие цифры только должны присутствовать: 2 7 5

# Результат:
# 275727572

def get_number_length():
    while True:
        length = input("Какой длины должно быть число? ")
        if length.isdigit():
            length = int(length)
            if length < 7:
                print("Это слишком короткое число. Пожалуйста, введите число длиной не менее 7 символов.: ")
            elif length > 30:
                print("Это слишком длинное число. Пожалуйста, введите число длиной не более 30 символов.: ")
            else:
                return length
        else:
            print("Пожалуйста, введите целое число.")

def get_allowed_digits():
    while True:
        digits = input("Какие цифры должны присутствовать: ")
        if len(digits.split(',')) < 3:
            print("Вы ввели слишком мало значений. Пожалуйста, введите не менее трех значений.")
        elif any(char.isdigit() for char in digits):
            if ',' in digits and ' ' in digits:
                print("Вы ввели неправильные значения. Пожалуйста, используйте только запятые или только пробелы.")
            else:
                return digits.replace(' ', '').split(',')

def generate_number(length, allowed_digits):
    import random
    return ''.join(random.choice(allowed_digits) for _ in range(length))

def main():
    length = get_number_length()
    allowed_digits = get_allowed_digits()
    number = generate_number(length, allowed_digits)
    print("Результат:")
    print(number)

main()


################################################################################


# Задание 9:
# Попросить пользователя ввести текст.В результате
# вывести процент букв в верхнем регистре(заглавные)
# и в нижнем регистре(прописные)

################################################################################


# Задание 10:
# Если вы были на Луне сейчас, ваш вес будет 16,5% от вашего веса земли.
# Для его расчета необходимо умножить на 0,165.
# Если в ближайшие 15 лет ваш вес будет увеличиваться на 1 кг каждый год.
# Какой будет ваш вес каждый год на Луне в следующем 15 лет?


def calculate_weight_on_moon(initial_weight_earth):
    weight_on_moon = initial_weight_earth * 0.165
    weights_on_moon = [weight_on_moon]

    for year in range(2024, 2039):
        weight_on_moon += 1 * 0.165
        weights_on_moon.append(weight_on_moon)

    return weights_on_moon


initial_weight_earth = float(input("Введите ваш текущий вес на Земле (в кг): "))
years = 15

weights_on_moon = calculate_weight_on_moon(initial_weight_earth)

for year, weight in enumerate(weights_on_moon, start=2024):
    print(f"Ваш вес на Луне в {year}: {weight:.2f} кг")



###############################################################################


# Задание 11:
# Попросить пользователя ввести слова через пробел.
# Отсортировать слова по количеству символов и вывести на экран результат.

# Пример input: сон машина стол книга девочка
# Результат: сон стол книга машина девочка

################################################################################



# Задание 12:
# Напишите функцию который будет конвертировать Фаренгейт в Цельсии и
# наоборот.
